"""

Hamming Numbers

URL: https://www.codewars.com/kata/526d84b98f428f14a60008da/python

A Hamming number is a positive integer of the form 2^i, 3^j, 5^k, 
for some non-negative integers i, j, and k.

Write a function that computes the nth smallest Hamming number.

Specifically:

The first smallest Hamming number is 1    = 2^0 * 3^0 * 5^0
The second smallest Hamming number is 2   = 2^1 * 3^0 * 5^0
The third smallest Hamming number is 3    = 2^0 * 3^1 * 5^0
The fourth smallest Hamming number is 4   = 2^2 * 3^0 * 5^0
The fifth smallest Hamming number is 5    = 2^0 * 3^0 * 5^1

Your code should be able to compute all of the smallest 5,000 
Hamming numbers without timing out.

----------------------------------------------------------------

From research, Hamming Numbers are the same as Natural Numbers,
which are described on Wikipedia here: 
https://en.wikipedia.org/wiki/Regular_number

This article contains a section on algorithms:

Algorithms for calculating the regular numbers in ascending order were 
popularized by Edsger Dijkstra. Dijkstra attributes to Hamming the 
problem of building the infinite ascending sequence of all 5-smooth 
numbers; this problem is now known as Hamming's problem, and the 
numbers so generated are also called the Hamming numbers. 
Dijkstra's ideas to compute these numbers are the following:

1) The sequence of Hamming numbers begins with the number 1.
2) The remaining values in the sequence are of the form 2h, 3h, 
   and 5h, where h is any Hamming number.
Therefore, the sequence H may be generated by outputting the value 1, 
and then merging the sequences 2H, 3H, and 5H.

This algorithm is often used to demonstrate the power of a lazy 
functional programming language, because (implicitly) concurrent 
efficient implementations, using a constant number of arithmetic 
operations per generated value, are easily constructed as described 
above. 
...
In the Python programming language, lazy functional code for generating 
regular numbers is used as one of the built-in tests for correctness 
of the language's implementation (it implements a lazy list). I
don't understand generators well enough to solve the problem this
way, so I'm going to try and get by with what I do know...

"""
hammings = [1]

#version 2 will try to remember where we put the lowest 'new'
#Hamming and only start from there

#version 3 uses set() and list sorting to beat extendHamming()!

last_good_index = 0

def hamming_v1(n):

    global hammings

    index = 0
    for h in hammings:
        index += 1
        if index == n:
            return hammings[n-1]
        extendHamming(hammings, 2*h)
        extendHamming(hammings, 3*h)
        extendHamming(hammings, 5*h)


def hamming_v2(n):

    global hammings
    global last_good_index

    index = last_good_index
    
    if n-1 < index:
        return hammings[n-1]
    else:
        for h in hammings[last_good_index:]:
            index += 1
            if index == n:
                last_good_index = n
                return hammings[n-1]
            extendHamming(hammings, 2*h)
            extendHamming(hammings, 3*h)
            extendHamming(hammings, 5*h)

def hamming_v3(n):

    global last_good_index
    global hammings
    
    index = last_good_index
    
    if n-1 < index:
        return hammings[n-1]
    else:
        while True:
            h = hammings[index]
            index += 1
            if index == n:
                last_good_index = n-1
                return hammings[n-1]
            hammings = sorted(set(hammings).update([2*h, 3*h, 5*h]))


def extendHamming(hammings, new_hamming):

    if new_hamming not in hammings:
        #insert the new number in the correct place
        for j in range(len(hammings), 0, -1):
            if hammings[j-1] < new_hamming:
                hammings.insert(j, new_hamming)
                return



print(hamming_v1(7))         # 8
print(hamming_v1(12))        # 16
print(hamming_v1(20))        # 36
print(hamming_v1(100))       # 1536
print(hamming_v1(1000))      # 51200000
print(hamming_v1(777))       # 10628820
print(hamming_v1(77))        # 729
print(hamming_v1(7))         # 8

print(hamming_v2(7))
print(hamming_v2(12))
print(hamming_v2(20))
print(hamming_v2(100))
print(hamming_v2(1000))
print(hamming_v2(777))
print(hamming_v2(77))
print(hamming_v2(7))

print(hamming_v3(7))
print(hamming_v3(12))
print(hamming_v3(20))
print(hamming_v3(100))
print(hamming_v3(1000))
print(hamming_v3(777))
print(hamming_v3(77))
print(hamming_v3(7))

